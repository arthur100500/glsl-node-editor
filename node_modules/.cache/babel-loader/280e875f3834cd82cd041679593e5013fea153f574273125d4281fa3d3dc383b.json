{"ast":null,"code":"/**\n * Element names may consist of Latin letters, digits, dashes and underscores.\n * CSS class is formed as block name plus two underscores plus element name: .block__elem\n * @param block\n * @param element\n */\nfunction getBEMElement(block, element) {\n  return `${block}__${element}`;\n}\n/**\n * CSS class is formed as block’s or element’s name plus two dashes:\n * .block--mod or .block__elem--mod and .block--color-black with .block--color-red.\n * Spaces in complicated modifiers are replaced by dash.\n * @param blockOrElement\n * @param modifier\n */\nfunction getBEMModifier(blockOrElement, modifier) {\n  return `${blockOrElement}--${modifier}`;\n}\nexport const splitClassName = 'react-split';\nexport const splitDragClassName = getBEMModifier(splitClassName, 'dragging');\nexport const splitVerticalClassName = getBEMModifier(splitClassName, 'vertical');\nexport const splitHorizontalClassName = getBEMModifier(splitClassName, 'horizontal');\nexport const bodyDisableUserSelect = getBEMModifier(splitClassName, 'disabled');\nexport const paneClassName = getBEMElement(splitClassName, 'pane');\nexport const sashClassName = getBEMElement(splitClassName, 'sash');\nexport const sashVerticalClassName = getBEMModifier(sashClassName, 'vertical');\nexport const sashHorizontalClassName = getBEMModifier(sashClassName, 'horizontal');\nexport const sashDisabledClassName = getBEMModifier(sashClassName, 'disabled');\nexport const sashHoverClassName = getBEMModifier(sashClassName, 'hover');\nexport function classNames() {\n  const classList = [];\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  for (const arg of args) {\n    if (!arg) continue;\n    const argType = typeof arg;\n    if (argType === 'string' || argType === 'number') {\n      classList.push(`${arg}`);\n      continue;\n    }\n    if (argType === 'object') {\n      if (arg.toString !== Object.prototype.toString) {\n        classList.push(arg.toString());\n        continue;\n      }\n      for (const key in arg) {\n        if (Object.hasOwnProperty.call(arg, key) && arg[key]) {\n          classList.push(key);\n        }\n      }\n    }\n  }\n  return classList.join(' ');\n}\n/**\n * Convert size to absolute number or Infinity\n * SplitPane allows sizes in string and number, but the state sizes only support number,\n * so convert string and number to number in here\n * 'auto' -> divide the remaining space equally\n * 'xxxpx' -> xxx\n * 'xxx%' -> wrapper.size * xxx/100\n *  xxx -> xxx\n */\nexport function assertsSize(size, sum) {\n  let defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  if (typeof size === 'undefined') return defaultValue;\n  if (typeof size === 'number') return size;\n  if (size.endsWith('%')) return sum * (+size.replace('%', '') / 100);\n  if (size.endsWith('px')) return +size.replace('px', '');\n  return defaultValue;\n}","map":{"version":3,"names":["getBEMElement","block","element","getBEMModifier","blockOrElement","modifier","splitClassName","splitDragClassName","splitVerticalClassName","splitHorizontalClassName","bodyDisableUserSelect","paneClassName","sashClassName","sashVerticalClassName","sashHorizontalClassName","sashDisabledClassName","sashHoverClassName","classNames","classList","args","arg","argType","push","toString","Object","prototype","key","hasOwnProperty","call","join","assertsSize","size","sum","defaultValue","Infinity","endsWith","replace"],"sources":["/home/arhur/Documents/GitHub/NodeEditor/node_modules/split-pane-react/esm/base.js"],"sourcesContent":["/**\n * Element names may consist of Latin letters, digits, dashes and underscores.\n * CSS class is formed as block name plus two underscores plus element name: .block__elem\n * @param block\n * @param element\n */\nfunction getBEMElement(block, element) {\n    return `${block}__${element}`;\n}\n/**\n * CSS class is formed as block’s or element’s name plus two dashes:\n * .block--mod or .block__elem--mod and .block--color-black with .block--color-red.\n * Spaces in complicated modifiers are replaced by dash.\n * @param blockOrElement\n * @param modifier\n */\nfunction getBEMModifier(blockOrElement, modifier) {\n    return `${blockOrElement}--${modifier}`;\n}\nexport const splitClassName = 'react-split';\nexport const splitDragClassName = getBEMModifier(splitClassName, 'dragging');\nexport const splitVerticalClassName = getBEMModifier(splitClassName, 'vertical');\nexport const splitHorizontalClassName = getBEMModifier(splitClassName, 'horizontal');\nexport const bodyDisableUserSelect = getBEMModifier(splitClassName, 'disabled');\nexport const paneClassName = getBEMElement(splitClassName, 'pane');\nexport const sashClassName = getBEMElement(splitClassName, 'sash');\nexport const sashVerticalClassName = getBEMModifier(sashClassName, 'vertical');\nexport const sashHorizontalClassName = getBEMModifier(sashClassName, 'horizontal');\nexport const sashDisabledClassName = getBEMModifier(sashClassName, 'disabled');\nexport const sashHoverClassName = getBEMModifier(sashClassName, 'hover');\nexport function classNames(...args) {\n    const classList = [];\n    for (const arg of args) {\n        if (!arg)\n            continue;\n        const argType = typeof arg;\n        if (argType === 'string' || argType === 'number') {\n            classList.push(`${arg}`);\n            continue;\n        }\n        if (argType === 'object') {\n            if (arg.toString !== Object.prototype.toString) {\n                classList.push(arg.toString());\n                continue;\n            }\n            for (const key in arg) {\n                if (Object.hasOwnProperty.call(arg, key) && arg[key]) {\n                    classList.push(key);\n                }\n            }\n        }\n    }\n    return classList.join(' ');\n}\n/**\n * Convert size to absolute number or Infinity\n * SplitPane allows sizes in string and number, but the state sizes only support number,\n * so convert string and number to number in here\n * 'auto' -> divide the remaining space equally\n * 'xxxpx' -> xxx\n * 'xxx%' -> wrapper.size * xxx/100\n *  xxx -> xxx\n */\nexport function assertsSize(size, sum, defaultValue = Infinity) {\n    if (typeof size === 'undefined')\n        return defaultValue;\n    if (typeof size === 'number')\n        return size;\n    if (size.endsWith('%'))\n        return sum * (+size.replace('%', '') / 100);\n    if (size.endsWith('px'))\n        return +size.replace('px', '');\n    return defaultValue;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}