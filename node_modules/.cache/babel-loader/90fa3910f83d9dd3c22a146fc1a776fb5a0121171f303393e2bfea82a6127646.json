{"ast":null,"code":"export default class NodeFactory {\n  fromJson(jsonCode) {\n    let nodeObject = JSON.parse(jsonCode);\n    return fromJson(nodeObject);\n  }\n  fromObject(nodeObject) {\n    let inputsObjects = [];\n    for (var i in nodeObject.inputs) inputsObjects.push({\n      name: nodeObject.inputs[i].name,\n      type: nodeObject.inputs[i].type\n    });\n    return {\n      id: \"node-\" + nodeObject.id,\n      position: {\n        x: nodeObject.positionX,\n        y: nodeObject.positionY\n      },\n      type: 'usual',\n      data: {\n        id: \"node-\" + nodeObject.id,\n        title: nodeObject.name,\n        inputs: inputsObjects,\n        type: nodeObject.output.type,\n        code: nodeObject.code\n      }\n    };\n  }\n  manyFromJson(jsonCode) {\n    let nodeObjects = JSON.parse(jsonCode);\n    let nodeObjectsParsed = [];\n    for (var index in nodeObjects) nodeObjectsParsed.push(fromObject(nodeObjects[index]));\n    return nodeObjectsParsed;\n  }\n}","map":{"version":3,"names":["NodeFactory","fromJson","jsonCode","nodeObject","JSON","parse","fromObject","inputsObjects","i","inputs","push","name","type","id","position","x","positionX","y","positionY","data","title","output","code","manyFromJson","nodeObjects","nodeObjectsParsed","index"],"sources":["/home/arhur/Documents/GitHub/NodeEditor/src/nodes/NodeFactory.js"],"sourcesContent":["export default class NodeFactory {\n    fromJson(jsonCode) {\n        let nodeObject = JSON.parse(jsonCode);\n        return fromJson(nodeObject);\n    }\n\n    fromObject(nodeObject) {\n        let inputsObjects = [];\n        for (var i in nodeObject.inputs)\n            inputsObjects.push({\n                name: nodeObject.inputs[i].name,\n                type: nodeObject.inputs[i].type\n            });\n\n        return {\n            id: \"node-\" + nodeObject.id,\n            position: { x: nodeObject.positionX, y: nodeObject.positionY },\n            type: 'usual',\n            data: {\n                id: \"node-\" + nodeObject.id,\n                title: nodeObject.name,\n                inputs: inputsObjects,\n                type: nodeObject.output.type,\n                code: nodeObject.code,\n            }\n        }\n    }\n\n    manyFromJson(jsonCode) {\n        let nodeObjects = JSON.parse(jsonCode);\n        let nodeObjectsParsed = [];\n        for (var index in nodeObjects)\n            nodeObjectsParsed.push(fromObject(nodeObjects[index]));\n\n        return nodeObjectsParsed;\n    }\n}\n"],"mappings":"AAAA,eAAe,MAAMA,WAAW,CAAC;EAC7BC,QAAQ,CAACC,QAAQ,EAAE;IACf,IAAIC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC;IACrC,OAAOD,QAAQ,CAACE,UAAU,CAAC;EAC/B;EAEAG,UAAU,CAACH,UAAU,EAAE;IACnB,IAAII,aAAa,GAAG,EAAE;IACtB,KAAK,IAAIC,CAAC,IAAIL,UAAU,CAACM,MAAM,EAC3BF,aAAa,CAACG,IAAI,CAAC;MACfC,IAAI,EAAER,UAAU,CAACM,MAAM,CAACD,CAAC,CAAC,CAACG,IAAI;MAC/BC,IAAI,EAAET,UAAU,CAACM,MAAM,CAACD,CAAC,CAAC,CAACI;IAC/B,CAAC,CAAC;IAEN,OAAO;MACHC,EAAE,EAAE,OAAO,GAAGV,UAAU,CAACU,EAAE;MAC3BC,QAAQ,EAAE;QAAEC,CAAC,EAAEZ,UAAU,CAACa,SAAS;QAAEC,CAAC,EAAEd,UAAU,CAACe;MAAU,CAAC;MAC9DN,IAAI,EAAE,OAAO;MACbO,IAAI,EAAE;QACFN,EAAE,EAAE,OAAO,GAAGV,UAAU,CAACU,EAAE;QAC3BO,KAAK,EAAEjB,UAAU,CAACQ,IAAI;QACtBF,MAAM,EAAEF,aAAa;QACrBK,IAAI,EAAET,UAAU,CAACkB,MAAM,CAACT,IAAI;QAC5BU,IAAI,EAAEnB,UAAU,CAACmB;MACrB;IACJ,CAAC;EACL;EAEAC,YAAY,CAACrB,QAAQ,EAAE;IACnB,IAAIsB,WAAW,GAAGpB,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAC;IACtC,IAAIuB,iBAAiB,GAAG,EAAE;IAC1B,KAAK,IAAIC,KAAK,IAAIF,WAAW,EACzBC,iBAAiB,CAACf,IAAI,CAACJ,UAAU,CAACkB,WAAW,CAACE,KAAK,CAAC,CAAC,CAAC;IAE1D,OAAOD,iBAAiB;EAC5B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}